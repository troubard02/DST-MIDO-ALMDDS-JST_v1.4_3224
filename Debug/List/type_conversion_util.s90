///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.20.4.1567 for Microchip AVR      11/Jun/2021  12:51:10
// Copyright 1996-2019 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Atmel AVR
//
//    Source file  =  
//        C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
//        System\4.
//        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\min_driver\type_conversion_util.c
//    Command line =  
//        -f C:\Users\troub\AppData\Local\Temp\EW245E.tmp
//        ("C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
//        System\4.
//        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\min_driver\type_conversion_util.c"
//        --cpu=m168pa -ms -o "C:\Users\troub\CloudStation\Github\GitHub_DST\1.
//        Remove Smoke System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\Obj"
//        -lC "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
//        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\List" -lA
//        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
//        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\List"
//        --initializers_in_flash --no_cse --no_inline --no_code_motion
//        --no_cross_call --no_clustering --no_tbaa --debug -e -I
//        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
//        System\4.
//        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\min_driver\" -I
//        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
//        System\4.
//        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\atmel_driver\" -I
//        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
//        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\" -I
//        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
//        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\" --eeprom_size 512
//        --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
//        Workbench 8.0\avr\LIB\DLIB\dlAVR-3s-ec_mul-sf-n.h" -Ol)
//    Locale       =  Korean_KOR.949
//    List file    =  
//        C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
//        System\4.
//        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\List\type_conversion_util.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME type_conversion_util

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega168PA"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"
        RTMODEL "__vtable_memory", "__nearflash"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?F2SL_L04
        EXTERN ?F_MUL_L04
        EXTERN ?SL2F_L04

        PUBLIC Trans_Char_to_Int
        PUBLIC Trans_Int_to_Char_HighByte
        PUBLIC Trans_Int_to_Char_LowByte
        PUBLIC Trans_Scale_Cal_Value
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+4
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
// C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\min_driver\type_conversion_util.c
//    1 
//    2 
//    3 #include "include.h"
//    4 
//    5 /*! \brief Trans_Int_to_Char_HighByte(int int_value)
//    6  
//    7 * value 값의 high byte를 리턴해준다. 
//    8 
//    9 */
//   10 
//   11 

        RSEG CODE:CODE:NOROOT(1)
//   12 uint8_t Trans_Int_to_Char_HighByte(uint16_t int_value)
Trans_Int_to_Char_HighByte:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function Trans_Int_to_Char_HighByte
          CFI NoCalls
//   13 {
//   14   uint8_t temp_value;
//   15   temp_value = int_value>>8;
        MOV     R16, R17
//   16   return temp_value;
        RET
//   17 }
          CFI EndBlock cfiBlock0
//   18 
//   19 /*! \brief Trans_Int_to_Char_LowByte(int int_value)
//   20  
//   21 * value 값의 low byte를 리턴해준다. 
//   22 
//   23 */
//   24 
//   25 

        RSEG CODE:CODE:NOROOT(1)
//   26 uint8_t Trans_Int_to_Char_LowByte(uint16_t int_value)
Trans_Int_to_Char_LowByte:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function Trans_Int_to_Char_LowByte
          CFI NoCalls
//   27 {
//   28   uint8_t temp_value;
//   29   temp_value = int_value;
//   30   return temp_value;
        RET
//   31   
//   32 }
          CFI EndBlock cfiBlock1
//   33 
//   34 /*! \brief Trans_Char_to_Int(char char_high_value,char char_low_value)
//   35  
//   36 * 두 byte를 합쳐서 하나의 integer 값을 만든다. 
//   37 
//   38 */
//   39 
//   40 
//   41 

        RSEG CODE:CODE:NOROOT(1)
//   42 uint16_t Trans_Char_to_Int(uint8_t char_high_value,uint8_t char_low_value)
Trans_Char_to_Int:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function Trans_Char_to_Int
          CFI NoCalls
//   43 {
//   44   uint16_t temp_value;
//   45   temp_value = char_high_value;
        MOV     R18, R16
//   46   temp_value = temp_value<<8;
        MOV     R19, R18
        LDI     R18, 0
//   47   temp_value |=char_low_value;
        MOV     R20, R17
        LDI     R21, 0
        OR      R18, R20
        OR      R19, R21
//   48   
//   49   return temp_value; 
        MOVW    R17:R16, R19:R18
        RET
//   50 }
          CFI EndBlock cfiBlock2
//   51 
//   52 
//   53 

        RSEG CODE:CODE:NOROOT(1)
//   54 int16_t Trans_Scale_Cal_Value(int16_t value,
Trans_Scale_Cal_Value:
          CFI Block cfiBlock3 Using cfiCommon1
          CFI Function Trans_Scale_Cal_Value
//   55                                           int16_t ADC_Zero_Set_Point,
//   56                                           int16_t Scale_Zero_Set_Value,
//   57                                           float Cal_Pressure_Coff)
//   58 {
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        MOVW    R25:R24, R21:R20
//   59   int16_t Real_Value;
//   60   __disable_interrupt();
        CLI
//   61   Real_Value = (int)(((int)value-(int)ADC_Zero_Set_Point) 
//   62                      * Cal_Pressure_Coff);
        SUB     R16, R18
        SBC     R17, R19
        MOV     R18, R17
        LSL     R18
        SBC     R18, R18
        MOV     R19, R18
          CFI FunCall ?SL2F_L04
        CALL    ?SL2F_L04
        LDD     R20, Y+2
        LDD     R21, Y+3
        LDD     R22, Y+4
        LDD     R23, Y+5
          CFI FunCall ?F_MUL_L04
        CALL    ?F_MUL_L04
          CFI FunCall ?F2SL_L04
        CALL    ?F2SL_L04
//   63     Real_Value = Scale_Zero_Set_Value + Real_Value;    
        ADD     R16, R24
        ADC     R17, R25
//   64   __enable_interrupt();  
        SEI
//   65 
//   66   return Real_Value;
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+5
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+4
        ADIW    R29:R28, 4
          CFI CFA_Y Y+0
        RET
//   67 
//   68 }
          CFI EndBlock cfiBlock3

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,020H
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,021H
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,022H
__?EEARH:

        END
//   69 
//   70 
// 
// 78 bytes in segment CODE
// 
// 78 bytes of CODE memory
//
//Errors: none
//Warnings: none
