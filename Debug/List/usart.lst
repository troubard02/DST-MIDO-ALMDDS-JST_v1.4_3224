###############################################################################
#
# IAR C/C++ Compiler V7.20.4.1567 for Microchip AVR       15/Jun/2021  10:34:59
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Atmel AVR
#
#    Source file  =  
#        C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\usart.c
#    Command line =  
#        -f C:\Users\troub\AppData\Local\Temp\EWEBE8.tmp
#        ("C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\usart.c"
#        --cpu=m168pa -ms -o "C:\Users\troub\CloudStation\Github\GitHub_DST\1.
#        Remove Smoke System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\Obj"
#        -lC "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\List" -lA
#        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\List"
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug -e -I
#        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4.
#        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\min_driver\" -I
#        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4.
#        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\atmel_driver\" -I
#        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\" -I
#        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\" --eeprom_size 512
#        --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\avr\LIB\DLIB\dlAVR-3s-ec_mul-sf-n.h" -Ol)
#    Locale       =  Korean_KOR.949
#    List file    =  
#        C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\List\usart.lst
#    Object file  =  
#        C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\Obj\usart.r90
#
###############################################################################

C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\usart.c
      1          #include "include.h"

   \                                 In  segment ABSOLUTE, at 0xc6
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   union <unnamed> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1
      2          
      3          
      4          
      5          
      6          
      7          
      8          
      9          #define FOSC 8000000
     10          #define BAUD 9600
     11          #define MYUBRR FOSC/16/BAUD-1
     12          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     13          uint8_t USART_Mode;
   \                     USART_Mode:
   \   00000000                      DS8 1
     14          #define RX_MODE 0 
     15          #define TX_MODE 1
     16          
     17          #define STX_HEADFILE 0x02 // '@'
     18          
     19          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     20          uint8_t USART_Rxc_Complete_Flag,USART_Txc_Complete_Flag;
   \                     USART_Rxc_Complete_Flag:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     USART_Txc_Complete_Flag:
   \   00000000                      DS8 1
     21          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     22          uint8_t USART_Check_Flag;
   \                     USART_Check_Flag:
   \   00000000                      DS8 1
     23          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     24          uint8_t USART_Txc_Buf[10];
   \                     USART_Txc_Buf:
   \   00000000                      DS8 10

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     25          uint8_t USART_Txc_Cnt;
   \                     USART_Txc_Cnt:
   \   00000000                      DS8 1
     26          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     27          uint8_t USART_Rxc_Buf[10];
   \                     USART_Rxc_Buf:
   \   00000000                      DS8 10

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     28          uint8_t USART_Rxc_Cnt;
   \                     USART_Rxc_Cnt:
   \   00000000                      DS8 1
     29          
     30          
     31          #define USART_TRANSMIT_BUFFER_SIZE 10
     32          #define USART_RECEIVE_BUFFER_SIZE 10
     33          
     34          #define USART_TRANSMIT_DATA_SIZE 5
     35          #define USART_RECEIVE_DATA_SIZE 5
     36          
     37          
     38          #define TIMER_ON 1
     39          #define TIMER_OFF 0
     40          #define TIMER_STOP 2
     41          
     42          #define USART_TIMEROUT 500
     43          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     44          uint8_t USART_Order;
   \                     USART_Order:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     45          uint8_t USART_Data;
   \                     USART_Data:
   \   00000000                      DS8 1
     46          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     47          uint8_t USART_Txd_Start_Flag;
   \                     USART_Txd_Start_Flag:
   \   00000000                      DS8 1
     48          
     49          typedef struct USART_BASIC_STRUCT           
     50          {                          
     51            unsigned char Txd_Count;
     52            unsigned char Rxd_Count;
     53            unsigned char Txd_Buffer[USART_TRANSMIT_BUFFER_SIZE+1];
     54            unsigned char Rxd_Buffer[USART_RECEIVE_BUFFER_SIZE+1];
     55            unsigned char Schedule_M_Timer_REG;
     56            unsigned int Schedule_M_Timer_CNT;
     57          
     58            unsigned char Schedule_TX_Timer_Reg;
     59            unsigned int Schedule_TX_Timer_Cnt;
     60          
     61            unsigned char Schedule_RX_Timer_Reg;
     62            unsigned int Schedule_RX_Timer_Cnt;
     63          
     64            unsigned char Txd_Checksum;
     65            unsigned char Rxd_Checksum;
     66          
     67           
     68          }USART_BASIC_STRUCT;
     69          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     70          struct USART_BASIC_STRUCT USART_STRUCT;
   \                     USART_STRUCT:
   \   00000000                      DS8 35
     71          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     72          uint8_t Usart_Txd_Buf[10]={0x01,0x02,0x03,0x04};
   \                     Usart_Txd_Buf:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for Usart_Txd_Buf>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     73          uint16_t Usart_Txd_Cnt;
   \                     Usart_Txd_Cnt:
   \   00000000                      DS8 2
     74          #pragma   vector=USART_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     75          __interrupt void USART_RX_VECT()
   \                     USART_RX_VECT:
     76          {
   \   00000000   930A               ST      -Y, R16
   \   00000002   B70F               IN      R16, 0x3F
     77          
     78            
     79            //uint8_t USART_Rxc_Data;
     80            __disable_interrupt();
   \   00000004   94F8               CLI
     81            /*
     82          
     83            USART_Rxc_Data = UDR0;
     84            
     85            Usart_Rxd_Buf[Usart_Rxd_Cnt++]=USART_Rxc_Data;
     86            if(Usart_Rxd_Cnt>490)Usart_Rxd_Cnt=0;
     87            
     88          
     89            
     90            if(USART_Mode == RX_MODE){
     91          
     92              if(USART_STRUCT.Rxd_Count==0){
     93                if(USART_Rxc_Data == STX_HEADFILE){
     94                  USART_STRUCT.Rxd_Buffer[0]=STX_HEADFILE;
     95                  USART_STRUCT.Rxd_Count++;
     96                  USART_STRUCT.Schedule_RX_Timer_Cnt=0;
     97                  USART_STRUCT.Schedule_RX_Timer_Reg=1;
     98                }
     99              }
    100              else {
    101                if(USART_STRUCT.Rxd_Count<=USART_RECEIVE_DATA_SIZE){
    102                  USART_STRUCT.Rxd_Buffer[USART_STRUCT.Rxd_Count++] = USART_Rxc_Data;
    103                  if(USART_STRUCT.Rxd_Count==USART_RECEIVE_DATA_SIZE){
    104                    USART_Rxc_Complete_Flag=1;
    105                  }
    106                }
    107                
    108              }
    109            }*/
    110            __enable_interrupt();
   \   00000006   9478               SEI
    111            
    112          }
   \   00000008   BF0F               OUT     0x3F, R16
   \   0000000A   9109               LD      R16, Y+
   \   0000000C   9518               RETI
    113          
    114          #pragma   vector=USART_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    115          __interrupt void USART_TX_VECT()
   \                     USART_TX_VECT:
    116          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
    117            __disable_interrupt();
   \   0000000C   94F8               CLI
    118          
    119            if(USART_Mode==TX_MODE){
   \   0000000E   9100....           LDS     R16, USART_Mode
   \   00000012   3001               CPI     R16, 1
   \   00000014   F4B1               BRNE    ??USART_TX_VECT_0
    120          
    121            
    122              //while(1){
    123                //if((UCSR0A&0x20)==0x20)break;
    124              //}
    125          
    126              if(USART_STRUCT.Txd_Count<USART_TRANSMIT_DATA_SIZE){
   \   00000016   9100....           LDS     R16, USART_STRUCT
   \   0000001A   3005               CPI     R16, 5
   \   0000001C   F478               BRCC    ??USART_TX_VECT_1
    127                UDR0 = USART_STRUCT.Txd_Buffer[USART_STRUCT.Txd_Count];
   \   0000001E   9100....           LDS     R16, USART_STRUCT
   \   00000022   E010               LDI     R17, 0
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(USART_STRUCT) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(USART_STRUCT) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   9300....           STS     _A_UDR0, R16
    128                USART_STRUCT.Txd_Count++;
   \   00000030   9100....           LDS     R16, USART_STRUCT
   \   00000034   9503               INC     R16
   \   00000036   9300....           STS     USART_STRUCT, R16
   \   0000003A   C003               RJMP    ??USART_TX_VECT_0
    129              }
    130              else {
    131                USART_Txc_Complete_Flag=1;
   \                     ??USART_TX_VECT_1:
   \   0000003C   E001               LDI     R16, 1
   \   0000003E   9300....           STS     USART_Txc_Complete_Flag, R16
    132              }
    133            
    134            }
    135            
    136          }
   \                     ??USART_TX_VECT_0:
   \   00000042   BF2F               OUT     0x3F, R18
   \   00000044   9109               LD      R16, Y+
   \   00000046   9119               LD      R17, Y+
   \   00000048   9129               LD      R18, Y+
   \   0000004A   91E9               LD      R30, Y+
   \   0000004C   91F9               LD      R31, Y+
   \   0000004E   9518               RETI
   \   00000050                      REQUIRE _A_UDR0
    137          

   \                                 In  segment CODE, align 2, keep-with-next
    138          void Usart_Reg_Initialize(void)
   \                     Usart_Reg_Initialize:
    139          {
    140          
    141            USART_STRUCT.Schedule_RX_Timer_Cnt=0;
   \   00000000   ....               LDI     R30, LOW(USART_STRUCT)
   \   00000002   ....               LDI     R31, (USART_STRUCT) >> 8
   \   00000004   E000               LDI     R16, 0
   \   00000006   8F07               STD     Z+31, R16
   \   00000008   E000               LDI     R16, 0
   \   0000000A   A300               STD     Z+32, R16
    142            USART_STRUCT.Schedule_RX_Timer_Reg=0;
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   9300....           STS     (USART_STRUCT + 30), R16
    143            USART_STRUCT.Schedule_TX_Timer_Cnt=0;
   \   00000012   ....               LDI     R30, LOW(USART_STRUCT)
   \   00000014   ....               LDI     R31, (USART_STRUCT) >> 8
   \   00000016   E000               LDI     R16, 0
   \   00000018   8F04               STD     Z+28, R16
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   8F05               STD     Z+29, R16
    144            USART_STRUCT.Schedule_TX_Timer_Reg=0;
   \   0000001E   E000               LDI     R16, 0
   \   00000020   9300....           STS     (USART_STRUCT + 27), R16
    145          
    146            USART_STRUCT.Rxd_Count=0;
   \   00000024   E000               LDI     R16, 0
   \   00000026   9300....           STS     (USART_STRUCT + 1), R16
    147            USART_STRUCT.Txd_Count=0;
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   9300....           STS     USART_STRUCT, R16
    148          
    149          }
   \   00000030   9508               RET
    150          

   \                                 In  segment CODE, align 2, keep-with-next
    151          void Usart_Send_Start_Byte(uint8_t Data)
   \                     Usart_Send_Start_Byte:
   \                     ??Usart_Send_Start_Byte_0:
    152          {
    153            //while(!(UCSRA&(0x20)==0x20))
    154          
    155            while(1){
    156              if((UCSR0A&0x20)==0x20)break;
   \   00000000   9110....           LDS     R17, _A_UCSR0A
   \   00000004   2F21               MOV     R18, R17
   \   00000006   FF25               SBRS    R18, 5
   \   00000008   CFFB               RJMP    ??Usart_Send_Start_Byte_0
    157            }
    158            UDR0 = Data;
   \   0000000A   9300....           STS     _A_UDR0, R16
    159          
    160          }
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_UCSR0A
   \   00000010                      REQUIRE _A_UDR0
    161          
    162          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    163          uint8_t Usart_Transaction_Delay_Timer_Reg;
   \                     Usart_Transaction_Delay_Timer_Reg:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    164          uint16_t Usart_Transaction_Delay_Timer_Cnt;
   \                     Usart_Transaction_Delay_Timer_Cnt:
   \   00000000                      DS8 2

   \                                 In  segment CODE, align 2, keep-with-next
    165          void Usart_Transaction_Delay_Timer(void)
   \                     Usart_Transaction_Delay_Timer:
    166          {
    167            /*
    168            if(Usart_Transaction_Delay_Timer_Reg==1){
    169              Usart_Transaction_Delay_Timer_Cnt++;
    170              if(Usart_Transaction_Delay_Timer_Cnt>5){
    171                Usart_Transaction_Delay_Timer_Cnt=0;
    172                Usart_Transaction_Delay_Timer_Reg=2;
    173              }
    174            }
    175            if(Usart_Transaction_Delay_Timer_Reg==2){
    176          
    177              UCSRB = (0<<RXCIE)|(1<<TXCIE)|(0<<RXEN)|(1<<TXEN);
    178                
    179              USART_Mode = TX_MODE;
    180              Usart_Send_Start_Byte(STX_HEADFILE);
    181              USART_STRUCT.Txd_Count++;
    182              USART_STRUCT.Schedule_TX_Timer_Reg=TIMER_ON;
    183          
    184              Usart_Transaction_Delay_Timer_Reg=0;
    185          
    186            }
    187          */
    188          
    189          
    190          }
   \   00000000   9508               RET
    191          
    192          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    193          uint8_t Usart_Delay_Timer_Reg;
   \                     Usart_Delay_Timer_Reg:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    194          uint16_t Usart_Delay_Timer_Cnt;
   \                     Usart_Delay_Timer_Cnt:
   \   00000000                      DS8 2
    195          

   \                                 In  segment CODE, align 2, keep-with-next
    196          void Usart_Timer(void)
   \                     Usart_Timer:
    197          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    198          
    199            if(Usart_Delay_Timer_Reg==1){
   \   00000004   9100....           LDS     R16, Usart_Delay_Timer_Reg
   \   00000008   3001               CPI     R16, 1
   \   0000000A   F571               BRNE    ??Usart_Timer_0
    200              Usart_Delay_Timer_Cnt++;
   \   0000000C   ....               LDI     R30, LOW(Usart_Delay_Timer_Cnt)
   \   0000000E   ....               LDI     R31, (Usart_Delay_Timer_Cnt) >> 8
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
    201              if(Usart_Delay_Timer_Cnt>50){
   \   0000001C   ....               LDI     R26, LOW(Usart_Delay_Timer_Cnt)
   \   0000001E   ....               LDI     R27, (Usart_Delay_Timer_Cnt) >> 8
   \   00000020   91ED               LD      R30, X+
   \   00000022   91FC               LD      R31, X
   \   00000024   97F3               SBIW    R31:R30, 51
   \   00000026   F100               BRCS    ??Usart_Timer_0
    202                Usart_Delay_Timer_Cnt=0; 
   \   00000028   ....               LDI     R30, LOW(Usart_Delay_Timer_Cnt)
   \   0000002A   ....               LDI     R31, (Usart_Delay_Timer_Cnt) >> 8
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   8300               ST      Z, R16
   \   00000030   E000               LDI     R16, 0
   \   00000032   8301               STD     Z+1, R16
    203                
    204                USART_STRUCT.Txd_Count=0;
   \   00000034   E000               LDI     R16, 0
   \   00000036   9300....           STS     USART_STRUCT, R16
    205                for(uint16_t i=0;i<USART_TRANSMIT_DATA_SIZE;i++)
   \   0000003A   E080               LDI     R24, 0
   \   0000003C   E090               LDI     R25, 0
   \   0000003E   C009               RJMP    ??Usart_Timer_1
    206                  USART_STRUCT.Txd_Buffer[i] = Usart_Txd_Buf[i];
   \                     ??Usart_Timer_2:
   \   00000040   01FC               MOVW    R31:R30, R25:R24
   \   00000042   ....               SUBI    R30, LOW((-(Usart_Txd_Buf) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(Usart_Txd_Buf) & 0xFFFF) >> 8
   \   00000046   8100               LD      R16, Z
   \   00000048   01FC               MOVW    R31:R30, R25:R24
   \   0000004A   ....               SUBI    R30, LOW((-(USART_STRUCT) & 0xFFFF))
   \   0000004C   ....               SBCI    R31, (-(USART_STRUCT) & 0xFFFF) >> 8
   \   0000004E   8302               STD     Z+2, R16
   \   00000050   9601               ADIW    R25:R24, 1
   \                     ??Usart_Timer_1:
   \   00000052   3085               CPI     R24, 5
   \   00000054   E000               LDI     R16, 0
   \   00000056   0790               CPC     R25, R16
   \   00000058   F398               BRCS    ??Usart_Timer_2
    207          
    208                Usart_Send_Start_Byte(STX_HEADFILE);
   \   0000005A   E002               LDI     R16, 2
   \   0000005C   ....               RCALL   Usart_Send_Start_Byte
    209                USART_STRUCT.Txd_Count++;
   \   0000005E   9100....           LDS     R16, USART_STRUCT
   \   00000062   9503               INC     R16
   \   00000064   9300....           STS     USART_STRUCT, R16
    210          
    211              }
    212            }
    213                
    214          }
   \                     ??Usart_Timer_0:
   \   00000068   E0E4               LDI     R30, 4
   \   0000006A   ........           JMP     ?EPILOGUE_B4_L09
    215          
    216          

   \                                 In  segment CODE, align 2, keep-with-next
    217          void Usart_Operation(void)
   \                     Usart_Operation:
    218          {
    219            uint16_t Usart_CheckSum_Value;
    220            uint8_t Usart_CheckSum;
    221            
    222            uint8_t Pressure_Value;
    223              
    224            __disable_interrupt();
   \   00000000   94F8               CLI
    225           
    226            if(Real_Pressure_Value>200)Pressure_Value=200;
   \   00000002   ....               LDI     R30, LOW(Real_Pressure_Value)
   \   00000004   ....               LDI     R31, (Real_Pressure_Value) >> 8
   \   00000006   8100               LD      R16, Z
   \   00000008   8111               LDD     R17, Z+1
   \   0000000A   3C09               CPI     R16, 201
   \   0000000C   E020               LDI     R18, 0
   \   0000000E   0712               CPC     R17, R18
   \   00000010   F014               BRLT    ??Usart_Operation_0
   \   00000012   EC08               LDI     R16, 200
   \   00000014   C00A               RJMP    ??Usart_Operation_1
    227            else if(Real_Pressure_Value<0)Pressure_Value=0;
   \                     ??Usart_Operation_0:
   \   00000016   ....               LDI     R30, LOW(Real_Pressure_Value)
   \   00000018   ....               LDI     R31, (Real_Pressure_Value) >> 8
   \   0000001A   8111               LDD     R17, Z+1
   \   0000001C   2311               TST     R17
   \   0000001E   F412               BRPL    ??Usart_Operation_2
   \   00000020   E000               LDI     R16, 0
   \   00000022   C003               RJMP    ??Usart_Operation_1
    228            else Pressure_Value = Real_Pressure_Value;
   \                     ??Usart_Operation_2:
   \   00000024   ....               LDI     R30, LOW(Real_Pressure_Value)
   \   00000026   ....               LDI     R31, (Real_Pressure_Value) >> 8
   \   00000028   8100               LD      R16, Z
    229            Usart_Txd_Buf[0] = STX_HEADFILE;
   \                     ??Usart_Operation_1:
   \   0000002A   E012               LDI     R17, 2
   \   0000002C   9310....           STS     Usart_Txd_Buf, R17
    230            Usart_Txd_Buf[1] = System_Mode;  
   \   00000030   9110....           LDS     R17, System_Mode
   \   00000034   9310....           STS     (Usart_Txd_Buf + 1), R17
    231            Usart_Txd_Buf[2] = Standard_Pressure_Value;
   \   00000038   ....               LDI     R30, LOW(Standard_Pressure_Value)
   \   0000003A   ....               LDI     R31, (Standard_Pressure_Value) >> 8
   \   0000003C   8120               LD      R18, Z
   \   0000003E   9320....           STS     (Usart_Txd_Buf + 2), R18
    232            Usart_Txd_Buf[3] = Pressure_Value;
   \   00000042   9300....           STS     (Usart_Txd_Buf + 3), R16
    233          
    234           
    235            Usart_CheckSum_Value = Usart_Txd_Buf[0] + 
    236                                   Usart_Txd_Buf[1] +
    237                                   Usart_Txd_Buf[2] +
    238                                   Usart_Txd_Buf[3];
   \   00000046   9120....           LDS     R18, Usart_Txd_Buf
   \   0000004A   9100....           LDS     R16, (Usart_Txd_Buf + 1)
   \   0000004E   0F20               ADD     R18, R16
   \   00000050   9100....           LDS     R16, (Usart_Txd_Buf + 2)
   \   00000054   0F20               ADD     R18, R16
   \   00000056   9100....           LDS     R16, (Usart_Txd_Buf + 3)
   \   0000005A   0F20               ADD     R18, R16
    239            Usart_CheckSum = (uint8_t)Usart_CheckSum_Value;
    240          
    241            Usart_Txd_Buf[4] = Usart_CheckSum;
   \   0000005C   9320....           STS     (Usart_Txd_Buf + 4), R18
    242            __enable_interrupt();
   \   00000060   9478               SEI
    243            /*
    244            if(Usart_Delay_Timer_Reg==2){
    245              Usart_Send_Start_Byte(0xAB);
    246              Usart_Delay_Timer_Reg=1;
    247            }*/
    248          /*
    249            if(USART_Txd_Start_Flag==1){
    250              Usart_Send_Start_Byte(STX_HEADFILE);
    251              USART_Txd_Start_Flag=0;
    252            }
    253          
    254          */
    255          
    256          }
   \   00000062   9508               RET
    257          
    258          
    259          
    260          

   \                                 In  segment CODE, align 2, keep-with-next
    261          void Uasrt_Initialize(void)
   \                     Uasrt_Initialize:
    262          {
    263          
    264            uint16_t ubrr=103;
   \   00000000   E607               LDI     R16, 103
   \   00000002   E010               LDI     R17, 0
    265          
    266            /* Set Baud Rate */
    267            UBRR0H=(uint8_t)(ubrr>>8);
   \   00000004   0198               MOVW    R19:R18, R17:R16
   \   00000006   2F23               MOV     R18, R19
   \   00000008   932000C5           STS     197, R18
    268            UBRR0L=(uint8_t)ubrr;
   \   0000000C   9300....           STS     _A_UBRR0, R16
    269          
    270            UCSR0A = (1<<U2X0);
   \   00000010   E002               LDI     R16, 2
   \   00000012   9300....           STS     _A_UCSR0A, R16
    271          
    272            /* Enable Receiver and Transmitter  
    273            UCSRB = (1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN);*/
    274          
    275            /* Enable Transmitter Module */
    276            UCSR0B = (0<<RXDIE0)|(1<<TXCIE0)|(0<<RXEN0)|(1<<TXEN0);
   \   00000016   E408               LDI     R16, 72
   \   00000018   9300....           STS     _A_UCSR0B, R16
    277          
    278            /* Enable Receiver Module 
    279            UCSRB = (1<<RXCIE)|(0<<TXCIE)|(1<<RXEN)|(0<<TXEN);*/
    280            
    281            /* Set Frame Format : 8data, 1 stop bit, none parity bit */
    282            UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)
    283                    |(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCSZ00);
   \   0000001C   E006               LDI     R16, 6
   \   0000001E   9300....           STS     _A_UCSR0C, R16
    284          
    285            USART_Mode = TX_MODE;
   \   00000022   E001               LDI     R16, 1
   \   00000024   9300....           STS     USART_Mode, R16
    286            Usart_Delay_Timer_Reg=1;
   \   00000028   E001               LDI     R16, 1
   \   0000002A   9300....           STS     Usart_Delay_Timer_Reg, R16
    287          
    288          
    289          }
   \   0000002E   9508               RET
   \   00000030                      REQUIRE _A_UBRR0
   \   00000030                      REQUIRE _A_UCSR0A
   \   00000030                      REQUIRE _A_UCSR0B
   \   00000030                      REQUIRE _A_UCSR0C

   \                                 In  segment INTVEC, offset 0x48, root
   \                     `??USART_RX_VECT::??INTVEC 72`:
   \   00000048   ........           JMP     USART_RX_VECT

   \                                 In  segment INTVEC, offset 0x50, root
   \                     `??USART_TX_VECT::??INTVEC 80`:
   \   00000050   ........           JMP     USART_TX_VECT

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Usart_Txd_Buf>`:
   \   00000000   020104030000       DC8 1, 2, 3, 4, 0, 0, 0, 0, 0, 0
   \              00000000    

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   USART_RX_VECT
      5      2   USART_TX_VECT
      0      2   Uasrt_Initialize
      0      2   Usart_Operation
      0      2   Usart_Reg_Initialize
      0      2   Usart_Send_Start_Byte
      4      2   Usart_Timer
        4      2   -> Usart_Send_Start_Byte
      0      2   Usart_Transaction_Delay_Timer


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Initializer for Usart_Txd_Buf>
       1  USART_Check_Flag
       1  USART_Data
       1  USART_Mode
       1  USART_Order
      14  USART_RX_VECT
       4  USART_RX_VECT::??INTVEC 72
      10  USART_Rxc_Buf
       1  USART_Rxc_Cnt
       1  USART_Rxc_Complete_Flag
      35  USART_STRUCT
      80  USART_TX_VECT
       4  USART_TX_VECT::??INTVEC 80
      10  USART_Txc_Buf
       1  USART_Txc_Cnt
       1  USART_Txc_Complete_Flag
       1  USART_Txd_Start_Flag
      48  Uasrt_Initialize
       2  Usart_Delay_Timer_Cnt
       1  Usart_Delay_Timer_Reg
     100  Usart_Operation
      50  Usart_Reg_Initialize
      16  Usart_Send_Start_Byte
     110  Usart_Timer
       2  Usart_Transaction_Delay_Timer
       2  Usart_Transaction_Delay_Timer_Cnt
       1  Usart_Transaction_Delay_Timer_Reg
      10  Usart_Txd_Buf
       2  Usart_Txd_Cnt
       2  _A_UBRR0
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UDR0
      12  -- Other

 
   6 bytes in segment ABSOLUTE
 420 bytes in segment CODE
  12 bytes in segment INITTAB
   8 bytes in segment INTVEC
  10 bytes in segment NEAR_I
  10 bytes in segment NEAR_ID
  72 bytes in segment NEAR_Z
 
 430 bytes of CODE memory (+ 20 bytes shared)
  82 bytes of DATA memory (+  6 bytes shared)

Errors: none
Warnings: none
