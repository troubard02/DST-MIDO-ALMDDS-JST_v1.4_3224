###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        12/Jun/2019  11:27:19 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\troub\CloudStation\Public\3. DST\7. DH-OWC\3.   #
#                    FIRMWARE\2. MIDO-ALMDDS-JST_v1_4\1.                      #
#                    MIDO-ALMDDS-JST_v1_4_190606\Source\zsc31014.c            #
#    Command line =  "C:\Users\troub\CloudStation\Public\3. DST\7. DH-OWC\3.  #
#                    FIRMWARE\2. MIDO-ALMDDS-JST_v1_4\1.                      #
#                    MIDO-ALMDDS-JST_v1_4_190606\Source\zsc31014.c"           #
#                    --cpu=m168pa -ms -o "C:\Users\troub\CloudStation\Public\ #
#                    3. DST\7. DH-OWC\3. FIRMWARE\2. MIDO-ALMDDS-JST_v1_4\1.  #
#                    MIDO-ALMDDS-JST_v1_4_190606\Debug\Obj\" -lC              #
#                    "C:\Users\troub\CloudStation\Public\3. DST\7. DH-OWC\3.  #
#                    FIRMWARE\2. MIDO-ALMDDS-JST_v1_4\1.                      #
#                    MIDO-ALMDDS-JST_v1_4_190606\Debug\List\" -lA             #
#                    "C:\Users\troub\CloudStation\Public\3. DST\7. DH-OWC\3.  #
#                    FIRMWARE\2. MIDO-ALMDDS-JST_v1_4\1.                      #
#                    MIDO-ALMDDS-JST_v1_4_190606\Debug\List\"                 #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -e -I "C:\Users\troub\CloudStation\Pub #
#                    lic\3. DST\7. DH-OWC\3. FIRMWARE\2.                      #
#                    MIDO-ALMDDS-JST_v1_4\1. MIDO-ALMDDS-JST_v1_4_190606\Sour #
#                    ce\drivers\min_driver\" -I "C:\Users\troub\CloudStation\ #
#                    Public\3. DST\7. DH-OWC\3. FIRMWARE\2.                   #
#                    MIDO-ALMDDS-JST_v1_4\1. MIDO-ALMDDS-JST_v1_4_190606\Sour #
#                    ce\drivers\atmel_driver\" -I                             #
#                    "C:\Users\troub\CloudStation\Public\3. DST\7. DH-OWC\3.  #
#                    FIRMWARE\2. MIDO-ALMDDS-JST_v1_4\1.                      #
#                    MIDO-ALMDDS-JST_v1_4_190606\Source\" -I                  #
#                    "C:\Users\troub\CloudStation\Public\3. DST\7. DH-OWC\3.  #
#                    FIRMWARE\2. MIDO-ALMDDS-JST_v1_4\1.                      #
#                    MIDO-ALMDDS-JST_v1_4_190606\" --eeprom_size 512 --dlib   #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\avr\LIB\DLIB\dlAVR-3s-ec_ #
#                    mul-sf-n.h" -Ol                                          #
#    List file    =  C:\Users\troub\CloudStation\Public\3. DST\7. DH-OWC\3.   #
#                    FIRMWARE\2. MIDO-ALMDDS-JST_v1_4\1.                      #
#                    MIDO-ALMDDS-JST_v1_4_190606\Debug\List\zsc31014.lst      #
#    Object file  =  C:\Users\troub\CloudStation\Public\3. DST\7. DH-OWC\3.   #
#                    FIRMWARE\2. MIDO-ALMDDS-JST_v1_4\1.                      #
#                    MIDO-ALMDDS-JST_v1_4_190606\Debug\Obj\zsc31014.r90       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\troub\CloudStation\Public\3. DST\7. DH-OWC\3. FIRMWARE\2. MIDO-ALMDDS-JST_v1_4\1. MIDO-ALMDDS-JST_v1_4_190606\Source\zsc31014.c
      1          #include "include.h"
      2          
      3          
      4          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      5          uint8_t Twi_Write_Buf[10]={0x50,0xAA};
   \                     Twi_Write_Buf:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for Twi_Write_Buf>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
      6          uint8_t Twi_Read_Buf[10]={0x51,0x00};
   \                     Twi_Read_Buf:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for Twi_Read_Buf>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      7          uint8_t Twi_Data_Buf[10];
   \                     Twi_Data_Buf:
   \   00000000                      DS8 10
      8          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      9          uint8_t Twi_Delay_Timer_Reg;
   \                     Twi_Delay_Timer_Reg:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     10          uint16_t Twi_Delay_Timer_Cnt;
   \                     Twi_Delay_Timer_Cnt:
   \   00000000                      DS8 2
     11          
     12          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     13          uint32_t Twi_Raw_Value;
   \                     Twi_Raw_Value:
   \   00000000                      DS8 4
     14          

   \                                 In  segment CODE, align 2, keep-with-next
     15          void Twi_Timer(void)
   \                     Twi_Timer:
     16          {
     17            if(Twi_Delay_Timer_Reg==1){
   \   00000000   9100....           LDS     R16, Twi_Delay_Timer_Reg
   \   00000004   3001               CPI     R16, 1
   \   00000006   F4B9               BRNE    ??Twi_Timer_0
     18              Twi_Delay_Timer_Cnt++;
   \   00000008   ....               LDI     R30, LOW(Twi_Delay_Timer_Cnt)
   \   0000000A   ....               LDI     R31, (Twi_Delay_Timer_Cnt) >> 8
   \   0000000C   8100               LD      R16, Z
   \   0000000E   8111               LDD     R17, Z+1
   \   00000010   5F0F               SUBI    R16, 255
   \   00000012   4F1F               SBCI    R17, 255
   \   00000014   8300               ST      Z, R16
   \   00000016   8311               STD     Z+1, R17
     19              if(Twi_Delay_Timer_Cnt>25){
   \   00000018   91E0....           LDS     R30, Twi_Delay_Timer_Cnt
   \   0000001C   91F0....           LDS     R31, (Twi_Delay_Timer_Cnt + 1)
   \   00000020   977A               SBIW    R31:R30, 26
   \   00000022   F048               BRCS    ??Twi_Timer_0
     20                Twi_Delay_Timer_Cnt=0;
   \   00000024   E000               LDI     R16, 0
   \   00000026   E010               LDI     R17, 0
   \   00000028   9300....           STS     Twi_Delay_Timer_Cnt, R16
   \   0000002C   9310....           STS     (Twi_Delay_Timer_Cnt + 1), R17
     21                Twi_Delay_Timer_Reg=2;
   \   00000030   E002               LDI     R16, 2
   \   00000032   9300....           STS     Twi_Delay_Timer_Reg, R16
     22              }
     23            }
     24          }
   \                     ??Twi_Timer_0:
   \   00000036   9508               RET
     25          

   \                                 In  segment CODE, align 2, keep-with-next
     26          void TWI_Operation(void)
   \                     TWI_Operation:
     27          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
     28            //TWI_Start_Transceiver_With_Data(Twi_Write_Buf,2);
     29            Twi_Delay_Timer_Reg=1;
   \   00000004   E001               LDI     R16, 1
   \   00000006   9300....           STS     Twi_Delay_Timer_Reg, R16
     30            while(Twi_Delay_Timer_Reg){
   \                     ??TWI_Operation_0:
   \   0000000A   9100....           LDS     R16, Twi_Delay_Timer_Reg
   \   0000000E   2300               TST     R16
   \   00000010   F021               BREQ    ??TWI_Operation_1
     31            
     32              if(Twi_Delay_Timer_Reg==2)break;
   \   00000012   9100....           LDS     R16, Twi_Delay_Timer_Reg
   \   00000016   3002               CPI     R16, 2
   \   00000018   F7C1               BRNE    ??TWI_Operation_0
     33            }
     34            TWI_Start_Transceiver_With_Data(Twi_Read_Buf,3);
   \                     ??TWI_Operation_1:
   \   0000001A   E023               LDI     R18, 3
   \   0000001C   ....               LDI     R16, LOW(Twi_Read_Buf)
   \   0000001E   ....               LDI     R17, (Twi_Read_Buf) >> 8
   \   00000020   ........           CALL    TWI_Start_Transceiver_With_Data
     35            while(TWI_Transceiver_Busy());                // Wait until TWI is ready for next transmission.
   \                     ??TWI_Operation_2:
   \   00000024   ........           CALL    TWI_Transceiver_Busy
   \   00000028   2300               TST     R16
   \   0000002A   F7E1               BRNE    ??TWI_Operation_2
     36          
     37            __disable_interrupt();
   \   0000002C   94F8               CLI
     38          
     39            for(uint16_t i=0;i<3;i++)
   \   0000002E   E080               LDI     R24, 0
   \   00000030   E090               LDI     R25, 0
   \   00000032   C009               RJMP    ??TWI_Operation_3
     40              Twi_Data_Buf[i]=TWI_buf[i];
   \                     ??TWI_Operation_4:
   \   00000034   01FC               MOVW    R31:R30, R25:R24
   \   00000036   ....               SUBI    R30, LOW((-(TWI_buf) & 0xFFFF))
   \   00000038   ....               SBCI    R31, (-(TWI_buf) & 0xFFFF) >> 8
   \   0000003A   8100               LD      R16, Z
   \   0000003C   01FC               MOVW    R31:R30, R25:R24
   \   0000003E   ....               SUBI    R30, LOW((-(Twi_Data_Buf) & 0xFFFF))
   \   00000040   ....               SBCI    R31, (-(Twi_Data_Buf) & 0xFFFF) >> 8
   \   00000042   8300               ST      Z, R16
   \   00000044   9601               ADIW    R25:R24, 1
   \                     ??TWI_Operation_3:
   \   00000046   3083               CPI     R24, 3
   \   00000048   E000               LDI     R16, 0
   \   0000004A   0790               CPC     R25, R16
   \   0000004C   F398               BRCS    ??TWI_Operation_4
     41          
     42            
     43            Twi_Raw_Value = Twi_Data_Buf[1];
   \   0000004E   9100....           LDS     R16, (Twi_Data_Buf + 1)
   \   00000052   E010               LDI     R17, 0
   \   00000054   E020               LDI     R18, 0
   \   00000056   E030               LDI     R19, 0
   \   00000058   ....               LDI     R30, LOW(Twi_Raw_Value)
   \   0000005A   ....               LDI     R31, (Twi_Raw_Value) >> 8
   \   0000005C   8300               ST      Z, R16
   \   0000005E   8311               STD     Z+1, R17
   \   00000060   8322               STD     Z+2, R18
   \   00000062   8333               STD     Z+3, R19
     44            Twi_Raw_Value = (Twi_Raw_Value<<8)+Twi_Data_Buf[2];
   \   00000064   ....               LDI     R30, LOW(Twi_Raw_Value)
   \   00000066   ....               LDI     R31, (Twi_Raw_Value) >> 8
   \   00000068   8140               LD      R20, Z
   \   0000006A   8151               LDD     R21, Z+1
   \   0000006C   8162               LDD     R22, Z+2
   \   0000006E   2F76               MOV     R23, R22
   \   00000070   2F65               MOV     R22, R21
   \   00000072   2F54               MOV     R21, R20
   \   00000074   E040               LDI     R20, 0
   \   00000076   9100....           LDS     R16, (Twi_Data_Buf + 2)
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   E020               LDI     R18, 0
   \   0000007E   E030               LDI     R19, 0
   \   00000080   0F40               ADD     R20, R16
   \   00000082   1F51               ADC     R21, R17
   \   00000084   1F62               ADC     R22, R18
   \   00000086   1F73               ADC     R23, R19
   \   00000088   ....               LDI     R30, LOW(Twi_Raw_Value)
   \   0000008A   ....               LDI     R31, (Twi_Raw_Value) >> 8
   \   0000008C   8340               ST      Z, R20
   \   0000008E   8351               STD     Z+1, R21
   \   00000090   8362               STD     Z+2, R22
   \   00000092   8373               STD     Z+3, R23
     45            //Twi_Raw_Value = (Twi_Raw_Value<<8)+Twi_Data_Buf[4];
     46            __enable_interrupt();
   \   00000094   9478               SEI
     47            
     48          }
   \   00000096   9189               LD      R24, Y+
   \   00000098   9199               LD      R25, Y+
   \   0000009A   9508               RET
     49          
     50          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     51          int16_t Scale_Zero_Set_1_Value,Scale_Span_Set_1_Value;
   \                     Scale_Zero_Set_1_Value:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Scale_Span_Set_1_Value:
   \   00000000                      DS8 2
     52          
     53          #define SCALE_ZERO_SET_1 0
     54          #define SCALE_SPAN_SET_1 500
     55          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     56          float Cal_Pressure_1_Coef,Cal_Pressure_2_Coef,Cal_Pressure_3_Coef;
   \                     Cal_Pressure_1_Coef:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Cal_Pressure_2_Coef:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Cal_Pressure_3_Coef:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     57          int32_t ADC_Zero_Set_1_Point,ADC_Span_Set_1_Point;
   \                     ADC_Zero_Set_1_Point:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ADC_Span_Set_1_Point:
   \   00000000                      DS8 4
     58          
     59          
     60          
     61          #define ADC_ZERO_SET_1  1638
     62          #define ADC_SPAN_SET_1 14745
     63          
     64          /*
     65          #define ADC_ZERO_SET_1  2516582
     66          #define ADC_SPAN_SET_1 14260633
     67          */
     68          
     69          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     70          int16_t Pressure_PA_Value;
   \                     Pressure_PA_Value:
   \   00000000                      DS8 2
     71          

   \                                 In  segment CODE, align 2, keep-with-next
     72          void Twi_Adc_Push_Coef(void)
   \                     Twi_Adc_Push_Coef:
     73          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
     74            Scale_Zero_Set_1_Value = SCALE_ZERO_SET_1;
   \   00000004   E000               LDI     R16, 0
   \   00000006   E010               LDI     R17, 0
   \   00000008   9300....           STS     Scale_Zero_Set_1_Value, R16
   \   0000000C   9310....           STS     (Scale_Zero_Set_1_Value + 1), R17
     75            Scale_Span_Set_1_Value = SCALE_SPAN_SET_1;
   \   00000010   EF04               LDI     R16, 244
   \   00000012   E011               LDI     R17, 1
   \   00000014   9300....           STS     Scale_Span_Set_1_Value, R16
   \   00000018   9310....           STS     (Scale_Span_Set_1_Value + 1), R17
     76          
     77            ADC_Zero_Set_1_Point = ADC_ZERO_SET_1;
   \   0000001C   E606               LDI     R16, 102
   \   0000001E   E016               LDI     R17, 6
   \   00000020   E020               LDI     R18, 0
   \   00000022   E030               LDI     R19, 0
   \   00000024   ....               LDI     R30, LOW(ADC_Zero_Set_1_Point)
   \   00000026   ....               LDI     R31, (ADC_Zero_Set_1_Point) >> 8
   \   00000028   8300               ST      Z, R16
   \   0000002A   8311               STD     Z+1, R17
   \   0000002C   8322               STD     Z+2, R18
   \   0000002E   8333               STD     Z+3, R19
     78            ADC_Span_Set_1_Point = ADC_SPAN_SET_1;
   \   00000030   E909               LDI     R16, 153
   \   00000032   E319               LDI     R17, 57
   \   00000034   E020               LDI     R18, 0
   \   00000036   E030               LDI     R19, 0
   \   00000038   ....               LDI     R30, LOW(ADC_Span_Set_1_Point)
   \   0000003A   ....               LDI     R31, (ADC_Span_Set_1_Point) >> 8
   \   0000003C   8300               ST      Z, R16
   \   0000003E   8311               STD     Z+1, R17
   \   00000040   8322               STD     Z+2, R18
   \   00000042   8333               STD     Z+3, R19
     79          
     80            Cal_Pressure_1_Coef = (float)(Scale_Span_Set_1_Value-Scale_Zero_Set_1_Value)
     81              /((int32_t)ADC_Span_Set_1_Point - (int32_t)ADC_Zero_Set_1_Point);
   \   00000044   9100....           LDS     R16, Scale_Span_Set_1_Value
   \   00000048   9110....           LDS     R17, (Scale_Span_Set_1_Value + 1)
   \   0000004C   9120....           LDS     R18, Scale_Zero_Set_1_Value
   \   00000050   9130....           LDS     R19, (Scale_Zero_Set_1_Value + 1)
   \   00000054   1B02               SUB     R16, R18
   \   00000056   0B13               SBC     R17, R19
   \   00000058   2F21               MOV     R18, R17
   \   0000005A   0F22               LSL     R18
   \   0000005C   0B22               SBC     R18, R18
   \   0000005E   2F32               MOV     R19, R18
   \   00000060   ........           CALL    ?SL2F_L04
   \   00000064   01C8               MOVW    R25:R24, R17:R16
   \   00000066   01D9               MOVW    R27:R26, R19:R18
   \   00000068   ....               LDI     R30, LOW(ADC_Span_Set_1_Point)
   \   0000006A   ....               LDI     R31, (ADC_Span_Set_1_Point) >> 8
   \   0000006C   8100               LD      R16, Z
   \   0000006E   8111               LDD     R17, Z+1
   \   00000070   8122               LDD     R18, Z+2
   \   00000072   8133               LDD     R19, Z+3
   \   00000074   ....               LDI     R30, LOW(ADC_Zero_Set_1_Point)
   \   00000076   ....               LDI     R31, (ADC_Zero_Set_1_Point) >> 8
   \   00000078   8140               LD      R20, Z
   \   0000007A   8151               LDD     R21, Z+1
   \   0000007C   8162               LDD     R22, Z+2
   \   0000007E   8173               LDD     R23, Z+3
   \   00000080   1B04               SUB     R16, R20
   \   00000082   0B15               SBC     R17, R21
   \   00000084   0B26               SBC     R18, R22
   \   00000086   0B37               SBC     R19, R23
   \   00000088   ........           CALL    ?SL2F_L04
   \   0000008C   01A8               MOVW    R21:R20, R17:R16
   \   0000008E   01B9               MOVW    R23:R22, R19:R18
   \   00000090   018C               MOVW    R17:R16, R25:R24
   \   00000092   019D               MOVW    R19:R18, R27:R26
   \   00000094   ........           CALL    ?F_DIV_L04
   \   00000098   ....               LDI     R30, LOW(Cal_Pressure_1_Coef)
   \   0000009A   ....               LDI     R31, (Cal_Pressure_1_Coef) >> 8
   \   0000009C   8300               ST      Z, R16
   \   0000009E   8311               STD     Z+1, R17
   \   000000A0   8322               STD     Z+2, R18
   \   000000A2   8333               STD     Z+3, R19
     82          }
   \   000000A4   E0E4               LDI     R30, 4
   \   000000A6   ........           JMP     ?EPILOGUE_B4_L09
     83          
     84          

   \                                 In  segment CODE, align 2, keep-with-next
     85          int16_t Twi_Adc_Cal_Real_Value(int32_t value,
   \                     Twi_Adc_Cal_Real_Value:
     86                                               int32_t ADC_Zero_Set_Point,
     87                                               int16_t Scale_Zero_Set_Value,
     88                                               float Cal_Pressure_Coff)
     89          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   8588               LDD     R24, Y+8
   \   00000006   8599               LDD     R25, Y+9
   \   00000008   844A               LDD     R4, Y+10
   \   0000000A   845B               LDD     R5, Y+11
   \   0000000C   846C               LDD     R6, Y+12
   \   0000000E   847D               LDD     R7, Y+13
     90            
     91            int16_t Real_Value;
     92            __disable_interrupt();
   \   00000010   94F8               CLI
     93            Real_Value = (int32_t)(((int32_t)value-(int32_t)ADC_Zero_Set_Point) 
     94                               * Cal_Pressure_Coff);
   \   00000012   1B04               SUB     R16, R20
   \   00000014   0B15               SBC     R17, R21
   \   00000016   0B26               SBC     R18, R22
   \   00000018   0B37               SBC     R19, R23
   \   0000001A   ........           CALL    ?SL2F_L04
   \   0000001E   01A2               MOVW    R21:R20, R5:R4
   \   00000020   01B3               MOVW    R23:R22, R7:R6
   \   00000022   ........           CALL    ?F_MUL_L04
   \   00000026   ........           CALL    ?F2SL_L04
     95            Real_Value = Scale_Zero_Set_Value + Real_Value;    
   \   0000002A   0F08               ADD     R16, R24
   \   0000002C   1F19               ADC     R17, R25
     96          
     97            __enable_interrupt();  
   \   0000002E   9478               SEI
     98          
     99            return Real_Value;
   \   00000030   E0EE               LDI     R30, 14
   \   00000032   ........           JMP     ?EPILOGUE_B8_L09
    100          
    101          }
    102          

   \                                 In  segment CODE, align 2, keep-with-next
    103          void Twi_Adc_Get_Pressure_Sensor_Value(void)
   \                     Twi_Adc_Get_Pressure_Sensor_Value:
    104          {
    105            Pressure_PA_Value = Twi_Adc_Cal_Real_Value(Twi_Raw_Value,
    106                                                   ADC_Zero_Set_1_Point,
    107                                                   Scale_Zero_Set_1_Value,
    108                                                   Cal_Pressure_1_Coef);
   \   00000000   ....               LDI     R30, LOW(Cal_Pressure_1_Coef)
   \   00000002   ....               LDI     R31, (Cal_Pressure_1_Coef) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   8111               LDD     R17, Z+1
   \   00000008   8122               LDD     R18, Z+2
   \   0000000A   8133               LDD     R19, Z+3
   \   0000000C   933A               ST      -Y, R19
   \   0000000E   932A               ST      -Y, R18
   \   00000010   931A               ST      -Y, R17
   \   00000012   930A               ST      -Y, R16
   \   00000014   9100....           LDS     R16, Scale_Zero_Set_1_Value
   \   00000018   9110....           LDS     R17, (Scale_Zero_Set_1_Value + 1)
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   ....               LDI     R30, LOW(ADC_Zero_Set_1_Point)
   \   00000022   ....               LDI     R31, (ADC_Zero_Set_1_Point) >> 8
   \   00000024   8140               LD      R20, Z
   \   00000026   8151               LDD     R21, Z+1
   \   00000028   8162               LDD     R22, Z+2
   \   0000002A   8173               LDD     R23, Z+3
   \   0000002C   ....               LDI     R30, LOW(Twi_Raw_Value)
   \   0000002E   ....               LDI     R31, (Twi_Raw_Value) >> 8
   \   00000030   8100               LD      R16, Z
   \   00000032   8111               LDD     R17, Z+1
   \   00000034   8122               LDD     R18, Z+2
   \   00000036   8133               LDD     R19, Z+3
   \   00000038   ....               RCALL   Twi_Adc_Cal_Real_Value
   \   0000003A   9300....           STS     Pressure_PA_Value, R16
   \   0000003E   9310....           STS     (Pressure_PA_Value + 1), R17
    109            //Adc_Real_Pressure_Value = Pressure_PA_Value;
    110            __disable_interrupt();
   \   00000042   94F8               CLI
    111            //Adc_Real_Pressure_Value = Pressure_PA_Value - ADC_AutoZero_Point;
    112            __enable_interrupt();
   \   00000044   9478               SEI
    113          }
   \   00000046   9508               RET

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Twi_Write_Buf>`:
   \   00000000   AA5000000000       DC8 80, 170, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Twi_Read_Buf>`:
   \   00000000   005100000000       DC8 81, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
    114          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       2      2  TWI_Operation
                   2 2 -> TWI_Start_Transceiver_With_Data
                   2 2 -> TWI_Transceiver_Busy
      14      4  Twi_Adc_Cal_Real_Value
       6      2  Twi_Adc_Get_Pressure_Sensor_Value
                   6 2 -> Twi_Adc_Cal_Real_Value
       4      4  Twi_Adc_Push_Coef
       0      2  Twi_Timer


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Initializer for Twi_Read_Buf>
      10  ?<Initializer for Twi_Write_Buf>
       4  ADC_Span_Set_1_Point
       4  ADC_Zero_Set_1_Point
       4  Cal_Pressure_1_Coef
       4  Cal_Pressure_2_Coef
       4  Cal_Pressure_3_Coef
       2  Pressure_PA_Value
       2  Scale_Span_Set_1_Value
       2  Scale_Zero_Set_1_Value
     156  TWI_Operation
      54  Twi_Adc_Cal_Real_Value
      72  Twi_Adc_Get_Pressure_Sensor_Value
     170  Twi_Adc_Push_Coef
      10  Twi_Data_Buf
       2  Twi_Delay_Timer_Cnt
       1  Twi_Delay_Timer_Reg
       4  Twi_Raw_Value
      10  Twi_Read_Buf
      56  Twi_Timer
      10  Twi_Write_Buf
      12  -- Other

 
 508 bytes in segment CODE
  12 bytes in segment INITTAB
  20 bytes in segment NEAR_I
  20 bytes in segment NEAR_ID
  43 bytes in segment NEAR_Z
 
 528 bytes of CODE memory (+ 12 bytes shared)
  63 bytes of DATA memory

Errors: none
Warnings: none
