###############################################################################
#
# IAR C/C++ Compiler V7.20.4.1567 for Microchip AVR       11/Jun/2021  12:51:10
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Atmel AVR
#
#    Source file  =  
#        C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4.
#        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\min_driver\type_conversion_util.c
#    Command line =  
#        -f C:\Users\troub\AppData\Local\Temp\EW245E.tmp
#        ("C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4.
#        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\min_driver\type_conversion_util.c"
#        --cpu=m168pa -ms -o "C:\Users\troub\CloudStation\Github\GitHub_DST\1.
#        Remove Smoke System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\Obj"
#        -lC "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\List" -lA
#        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\List"
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug -e -I
#        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4.
#        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\min_driver\" -I
#        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4.
#        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\atmel_driver\" -I
#        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\" -I
#        "C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\" --eeprom_size 512
#        --dlib --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\avr\LIB\DLIB\dlAVR-3s-ec_mul-sf-n.h" -Ol)
#    Locale       =  Korean_KOR.949
#    List file    =  
#        C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4.
#        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\List\type_conversion_util.lst
#    Object file  =  
#        C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke
#        System\4.
#        MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Debug\Obj\type_conversion_util.r90
#
###############################################################################

C:\Users\troub\CloudStation\Github\GitHub_DST\1. Remove Smoke System\4. MIDO\DST-MIDO-ALMDDS-JST_v1.4_3224\Source\drivers\min_driver\type_conversion_util.c
      1          
      2          
      3          #include "include.h"
      4          
      5          /*! \brief Trans_Int_to_Char_HighByte(int int_value)
      6           
      7          * value 값의 high byte를 리턴해준다. 
      8          
      9          */
     10          
     11          

   \                                 In  segment CODE, align 2, keep-with-next
     12          uint8_t Trans_Int_to_Char_HighByte(uint16_t int_value)
   \                     Trans_Int_to_Char_HighByte:
     13          {
     14            uint8_t temp_value;
     15            temp_value = int_value>>8;
   \   00000000   2F01               MOV     R16, R17
     16            return temp_value;
   \   00000002   9508               RET
     17          }
     18          
     19          /*! \brief Trans_Int_to_Char_LowByte(int int_value)
     20           
     21          * value 값의 low byte를 리턴해준다. 
     22          
     23          */
     24          
     25          

   \                                 In  segment CODE, align 2, keep-with-next
     26          uint8_t Trans_Int_to_Char_LowByte(uint16_t int_value)
   \                     Trans_Int_to_Char_LowByte:
     27          {
     28            uint8_t temp_value;
     29            temp_value = int_value;
     30            return temp_value;
   \   00000000   9508               RET
     31            
     32          }
     33          
     34          /*! \brief Trans_Char_to_Int(char char_high_value,char char_low_value)
     35           
     36          * 두 byte를 합쳐서 하나의 integer 값을 만든다. 
     37          
     38          */
     39          
     40          
     41          

   \                                 In  segment CODE, align 2, keep-with-next
     42          uint16_t Trans_Char_to_Int(uint8_t char_high_value,uint8_t char_low_value)
   \                     Trans_Char_to_Int:
     43          {
     44            uint16_t temp_value;
     45            temp_value = char_high_value;
   \   00000000   2F20               MOV     R18, R16
     46            temp_value = temp_value<<8;
   \   00000002   2F32               MOV     R19, R18
   \   00000004   E020               LDI     R18, 0
     47            temp_value |=char_low_value;
   \   00000006   2F41               MOV     R20, R17
   \   00000008   E050               LDI     R21, 0
   \   0000000A   2B24               OR      R18, R20
   \   0000000C   2B35               OR      R19, R21
     48            
     49            return temp_value; 
   \   0000000E   0189               MOVW    R17:R16, R19:R18
   \   00000010   9508               RET
     50          }
     51          
     52          
     53          

   \                                 In  segment CODE, align 2, keep-with-next
     54          int16_t Trans_Scale_Cal_Value(int16_t value,
   \                     Trans_Scale_Cal_Value:
     55                                                    int16_t ADC_Zero_Set_Point,
     56                                                    int16_t Scale_Zero_Set_Value,
     57                                                    float Cal_Pressure_Coff)
     58          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01CA               MOVW    R25:R24, R21:R20
     59            int16_t Real_Value;
     60            __disable_interrupt();
   \   00000006   94F8               CLI
     61            Real_Value = (int)(((int)value-(int)ADC_Zero_Set_Point) 
     62                               * Cal_Pressure_Coff);
   \   00000008   1B02               SUB     R16, R18
   \   0000000A   0B13               SBC     R17, R19
   \   0000000C   2F21               MOV     R18, R17
   \   0000000E   0F22               LSL     R18
   \   00000010   0B22               SBC     R18, R18
   \   00000012   2F32               MOV     R19, R18
   \   00000014   ........           CALL    ?SL2F_L04
   \   00000018   814A               LDD     R20, Y+2
   \   0000001A   815B               LDD     R21, Y+3
   \   0000001C   816C               LDD     R22, Y+4
   \   0000001E   817D               LDD     R23, Y+5
   \   00000020   ........           CALL    ?F_MUL_L04
   \   00000024   ........           CALL    ?F2SL_L04
     63              Real_Value = Scale_Zero_Set_Value + Real_Value;    
   \   00000028   0F08               ADD     R16, R24
   \   0000002A   1F19               ADC     R17, R25
     64            __enable_interrupt();  
   \   0000002C   9478               SEI
     65          
     66            return Real_Value;
   \   0000002E   9189               LD      R24, Y+
   \   00000030   9199               LD      R25, Y+
   \   00000032   9624               ADIW    R29:R28, 4
   \   00000034   9508               RET
     67          
     68          }
     69          
     70          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   Trans_Char_to_Int
      0      2   Trans_Int_to_Char_HighByte
      0      2   Trans_Int_to_Char_LowByte
      6      2   Trans_Scale_Cal_Value
        6      2 ?F2SL_L04
        6      2 ?F_MUL_L04
        6      2 ?SL2F_L04


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  Trans_Char_to_Int
       4  Trans_Int_to_Char_HighByte
       2  Trans_Int_to_Char_LowByte
      54  Trans_Scale_Cal_Value

 
 78 bytes in segment CODE
 
 78 bytes of CODE memory

Errors: none
Warnings: none
